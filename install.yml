---
- hosts: localhost
  gather_facts: false
  pre_tasks:
  - name: Load configuration
    include_role:
      name: ekara.configuration

- hosts: all
  gather_facts: true
  tasks:
  - name: Get node IPs
    set_fact:
      ekara_nodes_ips: "{{ groups['ek_role_manager'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | join(',') }}"
  - debug:
      var: ekara_nodes_ips
  - name: Install Docker
    include_role:
      name: ekara.docker
    vars:
      ekara_docker_proxy: "{{hostvars['localhost'].ek_config.proxy | default({})}}"
      ekara_docker_params: "{{hostvars['localhost'].ek_config.orchestrator.docker.params}}"
      ekara_docker_ca_cn: "{{hostvars['localhost'].ek_config.environment.name}}_{{hostvars['localhost'].ek_config.environment.qualifier}}"
      ekara_docker_all: "{{hostvars['localhost'].ek_config.orchestrator.docker}}"
      ekara_docker_nodes_ip: "{{ekara_nodes_ips}}"
      ekara_labels: "{{hostvars['localhost'].ek_config.labels|default({})}}"
      ekara_docker_default_version: "{{ekara_docker_recommended_version}}"
  - name: Update Docker proxy configuration
    when: hostvars['localhost'].ek_config.proxy | default({}).http_proxy is defined
    block:
    - name: Update Docker Proxies
      include_role:
        name: ekara.docker
        tasks_from: proxies.yml
      vars:
        ekara_docker_proxy: "{{ hostvars['localhost'].ek_config.proxy | default({}) }}"
        ekara_docker_nodes_ip: "{{ ekara_nodes_ips }}"
    - name: Restart Docker
      include_role:
        name: ekara.docker
        tasks_from: start.yml

- hosts: ek_role_manager
  gather_facts: true
  tasks:
  - name: Inspect swarm
    docker_swarm:
      state: inspect
    register: tokens
  - set_fact:
      swarm_info:
        worker_token: "{{tokens.swarm_facts.JoinTokens.Worker}}"
        manager_token: "{{tokens.swarm_facts.JoinTokens.Manager}}"
        manager_master: "{{ansible_facts.default_ipv4.address}}"
    when:
    - tokens.swarm_facts is defined

- hosts: localhost
  gather_facts: false
  tasks:
  - set_fact:
      swarm_info: "{{hostvars[item].swarm_info}}"
    loop: "{{groups['ek_role_manager']}}"
    when:
    - hostvars[item].swarm_info is defined

- hosts: ek_role_manager
  gather_facts: true
  run_once: true
  tasks:
  - block:
    - name: Create a new Swarm Cluster
      docker_swarm:
        state: "present"
        advertise_addr: "{{ansible_facts.default_ipv4.address}}"
      register: tokens
    - set_fact:
        swarm_info:
          worker_token: "{{tokens.swarm_facts.JoinTokens.Worker}}"
          manager_token: "{{tokens.swarm_facts.JoinTokens.Manager}}"
          manager_master: "{{ansible_facts.default_ipv4.address}}"
      when:
      - hostvars['localhost'].swarm_info is not defined

- hosts: localhost
  gather_facts: false
  tasks:
  - set_fact:
      swarm_info: "{{hostvars[item].swarm_info}}"
    loop: "{{groups['ek_role_manager']}}"
    when:
    - hostvars[item].swarm_info is defined

- hosts: ek_role_manager
  gather_facts: true
  tasks:
  - name: Add Swarm managers
    docker_swarm:
      state: "join"
      advertise_addr: "{{ansible_facts.default_ipv4.address}}"
      join_token: "{{hostvars['localhost'].swarm_info.manager_token}}"
      remote_addrs: ["{{hostvars['localhost'].swarm_info.manager_master}}:2377"]

- hosts: ek_role_worker
  gather_facts: true
  tasks:
  - name: Add Swarm workers
    docker_swarm:
      state: "join"
      advertise_addr: "{{ansible_facts.default_ipv4.address}}"
      join_token: "{{hostvars['localhost'].swarm_info.worker_token}}"
      remote_addrs: ["{{hostvars['localhost'].swarm_info.manager_master}}:2377"]
