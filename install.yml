---
- hosts: localhost
  gather_facts: false
  tasks:
  - name: Load configuration
    include_role:
      name: ekara.configuration

- hosts: ek_nodeset_{{ hostvars['localhost'].ek_config.environment.nodeset }}
  gather_facts: true
  tasks:
  - name: Ensure operating system is installed and configured
    include_role:
      name: ekara.install

  - name: Ensure Docker is installed and configured
    include_role:
      name: ekara.docker
    vars:
      ek_docker_ca_cn: "{{ hostvars['localhost'].ek_config.environment.id }}"
      ek_docker_proxy: "{{ hostvars['localhost'].ek_config.proxy }}"
      ek_docker_params: "{{ hostvars['localhost'].ek_config.docker }}"

- hosts: ek_role_manager
  gather_facts: true
  tasks:
  - block:
    - name: Check if a Swarm cluster already exists
      docker_swarm:
        state: inspect
      register: ek_tokens

    - name: Extract tokens from existing Swarm cluster
      when: ek_tokens.swarm_facts is defined
      set_fact:
        ek_swarm_info:
          worker_token: "{ ek_tokens.swarm_facts.JoinTokens.Worker }}"
          manager_token: "{{ ek_tokens.swarm_facts.JoinTokens.Manager }}"
          manager_master: "{{ ansible_facts.default_ipv4.address }}"

- hosts: localhost
  gather_facts: false
  tasks:
  - name: Store Swarm cluster info if any
    loop: "{{ groups['ek_role_manager']) }}"
    when: hostvars[item].ek_swarm_info is defined
    set_fact:
      ek_swarm_info: "{{ hostvars[item].ek_swarm_info }}"

- hosts: ek_nodeset_{{ hostvars['localhost'].ek_config.environment.nodeset }}:&ek_role_manager
  gather_facts: true
  run_once: true
  tasks:
  - name: Create a new Swarm cluster
    when: hostvars['localhost'].ek_swarm_info is not defined
    block:
    - name: Ensure a Swarm Cluster is present
      docker_swarm:
        state: "present"
        advertise_addr: "{{ ansible_facts.default_ipv4.address }}"
      register: ek_tokens

    - name: Extract tokens from new Swarm cluster
      set_fact:
        ek_swarm_info:
          worker_token: "{{ ek_tokens.swarm_facts.JoinTokens.Worker }}"
          manager_token: "{{ ek_tokens.swarm_facts.JoinTokens.Manager }}"
          manager_master: "{{ ansible_facts.default_ipv4.address }}"

- hosts: localhost
  gather_facts: false
  tasks:
  - name: Store Swarm cluster info if any
    loop: "{{ groups['ek_role_manager']) }}"
    when: hostvars[item].ek_swarm_info is defined
    set_fact:
      ek_swarm_info: "{{ hostvars[item].ek_swarm_info }}"

- hosts: ek_nodeset_{{ hostvars['localhost'].ek_config.environment.nodeset }}:&ek_role_manager
  gather_facts: true
  tasks:
  - name: Ensure managers from the nodeset are joining the Swarm cluster
    docker_swarm:
      state: "join"
      advertise_addr: "{{ ansible_facts.default_ipv4.address }}"
      join_token: "{{ hostvars['localhost'].ek_swarm_info.manager_token }}"
      remote_addrs: [ "{{ hostvars['localhost'].ek_swarm_info.manager_master }}:2377" ]

- hosts: ek_nodeset_{{ hostvars['localhost'].ek_config.environment.nodeset }}:&ek_role_worker
  gather_facts: true
  tasks:
  - name: Ensure workers from the nodeset are joining the Swarm cluster
    docker_swarm:
      state: "join"
      advertise_addr: "{{ ansible_facts.default_ipv4.address }}"
      join_token: "{{ hostvars['localhost'].ek_swarm_info.worker_token }}"
      remote_addrs: [ "{{ hostvars['localhost'].ek_swarm_info.manager_master }}:2377" ]
